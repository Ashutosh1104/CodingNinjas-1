A thief robbing a store and can carry a maximal weight of W into his knapsack.
There are N items and ith item weigh wi and is value vi. What is the maximum value V, that thief can take ?


#include<cmath>

//brute force 

int knapsack(int* weights, int* values, int n, int maxWeight){
	
   if(n==0 || maxWeight==0)
        return 0;
    
  if(weights[0]>maxWeight)
        return knapsack(weights+1,values+1, n-1,maxWeight);
    
     else
        return max(values[0]+knapsack(weights+1,values+1,n-1,maxWeight-weights[0]),knapsack(weights+1,values+1,n-1,maxWeight));
    
}

int knapsack(int* w, int* v, int n, int max_weight)
{
	int* zero = new int[max_weight + 1];
	int* one = new int[max_weight + 1];
	for (int i = 0; i < max_weight + 1; i++)
	{
		zero[i] = 0;
		one[i] = 0;
	}
	for (int i = 1; i <= n; i++)
	{
		for (int j = 1; j <= max_weight; j++)
		{
			if (j - w[i - 1] >= 0)
			{
				one[j] = max(zero[j], v[i - 1] + zero[j - w[i - 1]]);
			}
			else
			{
				one[j] = zero[j];
			}
		}

		for (int j = 0; j <= max_weight; j++)
		{
			zero[j] = one[j];
			one[j] = 0;
		}
	}
	return zero[max_weight];
}
